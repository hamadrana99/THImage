CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)
CMAKE_POLICY(VERSION 2.6)

FIND_PACKAGE(JPEG)
FIND_PACKAGE(PNG)
FIND_PACKAGE (TH CONFIG REQUIRED)
IF(NOT TH_LIBRARIES)
  SET(TH_LIBRARIES "TH")
ENDIF(NOT TH_LIBRARIES)
MESSAGE(STATUS "TH_LIBRARIES: ${TH_LIBRARIES}")
if(JPEG_LIBRARIES)
MESSAGE(STATUS "JPEG_LIBRARIES: ${JPEG_LIBRARIES}")
ENDIF(JPEG_LIBRARIES)
if(PNG_LIBRARIES)
MESSAGE(STATUS "PNG_LIBRARIES: ${PNG_LIBRARIES}")
ENDIF(PNG_LIBRARIES)
INCLUDE_DIRECTORIES(${TH_INCLUDE_DIR})
LINK_DIRECTORIES(${TH_LIBRARIES})
INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}")
MACRO(ADD_TORCH_LIBRARY package type src)
  IF ("${type}" STREQUAL "STATIC")
    if ("${src}" MATCHES "cu$" OR "${src}" MATCHES "cu;")
      CUDA_ADD_LIBRARY(${package} STATIC ${src})
    else()
      ADD_LIBRARY(${package} STATIC ${src})
    endif()
  ELSE()
    if ("${src}" MATCHES "cu$" OR "${src}" MATCHES "cu;")
      CUDA_ADD_LIBRARY(${package} ${type} ${src})
    else()
      ADD_LIBRARY(${package} ${type} ${src})
    endif()
  ENDIF()
ENDMACRO()

# OpenMP support?
SET(WITH_OPENMP ON CACHE BOOL "OpenMP support if available?")
IF (APPLE AND CMAKE_COMPILER_IS_GNUCC)
  EXEC_PROGRAM (uname ARGS -v  OUTPUT_VARIABLE DARWIN_VERSION)
  STRING (REGEX MATCH "[0-9]+" DARWIN_VERSION ${DARWIN_VERSION})
  MESSAGE (STATUS "MAC OS Darwin Version: ${DARWIN_VERSION}")
  IF (DARWIN_VERSION GREATER 9)
    SET(APPLE_OPENMP_SUCKS 1)
  ENDIF (DARWIN_VERSION GREATER 9)
  EXECUTE_PROCESS (COMMAND ${CMAKE_C_COMPILER} -dumpversion
    OUTPUT_VARIABLE GCC_VERSION)
  IF (APPLE_OPENMP_SUCKS AND GCC_VERSION VERSION_LESS 4.6.2)
    MESSAGE(STATUS "Warning: Disabling OpenMP (unstable with this version of GCC)")
    MESSAGE(STATUS " Install GCC >= 4.6.2 or change your OS to enable OpenMP")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unknown-pragmas")
    SET(WITH_OPENMP OFF CACHE BOOL "OpenMP support if available?" FORCE)
  ENDIF ()
ENDIF ()

IF (WITH_OPENMP)
  FIND_PACKAGE(OpenMP)
  IF(OPENMP_FOUND)
    MESSAGE(STATUS "Compiling with OpenMP support")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
  ENDIF(OPENMP_FOUND)
ENDIF (WITH_OPENMP)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")

SET(src ppm.c)


if (JPEG_FOUND)
    SET(src ${src} jpeg.c)
    include_directories (${JPEG_INCLUDE_DIR})
    SET(CMAKE_REQUIRED_INCLUDES "${JPEG_INCLUDE_DIR}")
    SET(CMAKE_REQUIRED_LIBRARIES "${JPEG_LIBRARY}")
    INCLUDE(CheckSymbolExists)
    CHECK_SYMBOL_EXISTS(jpeg_mem_src "stddef.h;stdio.h;jpeglib.h" HAVE_JPEG_MEM_SRC)
    IF (HAVE_JPEG_MEM_SRC)
      SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DHAVE_JPEG_MEM_SRC")
    ENDIF (HAVE_JPEG_MEM_SRC)
    CHECK_SYMBOL_EXISTS(jpeg_mem_dest "stddef.h;stdio.h;jpeglib.h" HAVE_JPEG_MEM_DEST)
    IF (HAVE_JPEG_MEM_DEST)
      SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DHAVE_JPEG_MEM_DEST")
    ENDIF (HAVE_JPEG_MEM_DEST)
    LINK_DIRECTORIES(${JPEG_LIBRARIES})
else (JPEG_FOUND)
    message ("WARNING: Could not find JPEG libraries, JPEG wrapper will not be installed")
endif (JPEG_FOUND)

if (PNG_FOUND)
    SET(src ${src} lua_png.c)
    include_directories (${PNG_INCLUDE_DIR})
    LINK_DIRECTORIES(${PNG_LIBRARIES})
else (PNG_FOUND)
    message ("WARNING: Could not find PNG libraries, PNG wrapper will not be installed")
endif (PNG_FOUND)

SET(src ${src} image.c THImage.c)

ADD_TORCH_LIBRARY(THImage SHARED "${src}")
TARGET_LINK_LIBRARIES(THImage ${TH_LIBRARIES} ${JPEG_LIBRARIES} ${PNG_LIBRARIES})

INSTALL(FILES
  image.h
  jpeg.h
  ppm.h
  lua_png.h
  THImage.h
  DESTINATION "${CMAKE_INSTALL_PREFIX}/include/THImage")
INSTALL(FILES
  generic/image.h
  generic/jpeg.h
  generic/ppm.h
  generic/lua_png.h
  generic/THImage.h
  DESTINATION "${CMAKE_INSTALL_PREFIX}/include/THImage/generic")
INSTALL(TARGETS THImage DESTINATION "${CMAKE_INSTALL_PREFIX}/lib")
